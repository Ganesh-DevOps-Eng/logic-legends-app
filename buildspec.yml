version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 22
  pre_build:
    commands:
      - echo "Starting pre-build phase..."
      - echo "Changing to logic-legends-app directory..."
      - |
        cd logic-legends-app || { echo "Error: logic-legends-app directory not found!"; exit 1; }
        echo "Installing dependencies..."
        if [ -f package-lock.json ]; then 
          echo "Using npm ci"
          npm ci
        else 
          echo "Lockfile not found, using npm install"
          npm install
        fi
        echo "Dependencies installed successfully"
      
  build:
    commands:
      - echo "Build started on `date`"
      - echo "Building TypeScript application..."
      - |
        cd logic-legends-app
        npm run build
        echo "Build completed on `date`"
      
  post_build:
    commands:
      - echo "Post-build phase started"
      - |
        # After build phase, we're in logic-legends-app, so go up to source root
        # First, check where we are
        CURRENT_DIR=$(pwd)
        echo "Current directory: $CURRENT_DIR"
        
        # Check if appspec.yml is in current directory (we're at source root)
        if [ -f "appspec.yml" ]; then
          SOURCE_ROOT=$(pwd)
        elif [ -f "../appspec.yml" ]; then
          # We're in logic-legends-app, go up one level
          SOURCE_ROOT=$(cd .. && pwd)
          cd "$SOURCE_ROOT"
        else
          # Try going up one more level
          SOURCE_ROOT=$(cd ../.. && pwd)
          cd "$SOURCE_ROOT"
        fi
        
        echo "Source root: $SOURCE_ROOT"
        echo "Current directory after navigation: $(pwd)"
        echo "Files in source root:"
        ls -la | head -15
        
        # Verify appspec.yml exists in source root
        if [ ! -f "appspec.yml" ]; then
          echo "ERROR: appspec.yml not found in source root: $SOURCE_ROOT"
          echo "Looking for appspec.yml..."
          find . -name "appspec.yml" -type f 2>/dev/null || echo "Not found anywhere"
          ls -la "$SOURCE_ROOT" | head -20
          exit 1
        fi
        echo "✅ appspec.yml found at: $SOURCE_ROOT/appspec.yml"
        
        # Prepare deployment package in a temp directory
        DEPLOY_DIR="/tmp/deploy-package"
        rm -rf "$DEPLOY_DIR"
        mkdir -p "$DEPLOY_DIR"
        
        echo "Copying application files..."
        # Copy built application from logic-legends-app
        if [ -d "$SOURCE_ROOT/logic-legends-app" ]; then
          cp -r "$SOURCE_ROOT/logic-legends-app"/* "$DEPLOY_DIR/" || { echo "ERROR: Failed to copy app files"; exit 1; }
        else
          echo "ERROR: logic-legends-app directory not found in $SOURCE_ROOT"
          exit 1
        fi
        
        echo "Installing production dependencies..."
        cd "$DEPLOY_DIR"
        npm install --production || { echo "ERROR: Failed to install production deps"; exit 1; }
        
        echo "Copying CodeDeploy files..."
        # Copy appspec.yml and scripts from source root to deployment directory
        cp "$SOURCE_ROOT/appspec.yml" . || { echo "ERROR: Failed to copy appspec.yml from $SOURCE_ROOT"; exit 1; }
        cp -R "$SOURCE_ROOT/scripts" . || { echo "ERROR: Failed to copy scripts from $SOURCE_ROOT"; exit 1; }
        chmod +x scripts/*.sh || true
        
        # Verify appspec.yml is at root of deployment directory
        echo "Verifying appspec.yml at deployment root..."
        ls -la appspec.yml || { echo "ERROR: appspec.yml not found at deployment root!"; exit 1; }
        echo "✅ appspec.yml found at: $(pwd)/appspec.yml"
        
        echo "Creating deployment zip package..."
        echo "Files to be zipped:"
        ls -la | head -20
        
        # Create zip from deployment directory - appspec.yml MUST be at root
        echo "Creating zip from deployment directory..."
        cd "$DEPLOY_DIR"
        
        # Ensure we're in the deployment directory with appspec.yml
        echo "Current directory before zip: $(pwd)"
        echo "Files in deployment directory (first 20):"
        ls -la | head -20
        echo "Checking appspec.yml exists:"
        ls -la appspec.yml || { echo "ERROR: appspec.yml not in deployment dir!"; exit 1; }
        
        # Create zip file - CodeBuild artifact should be in CODEBUILD_SRC_DIR
        ARTIFACT_DIR="${CODEBUILD_SRC_DIR:-$SOURCE_ROOT}"
        ZIP_FILE="$ARTIFACT_DIR/app.zip"
        echo "Creating zip at: $ZIP_FILE"
        
        # Remove old zip if exists
        rm -f "$ZIP_FILE"
        
        # Create zip with all files from current directory (deployment dir)
        zip -r "$ZIP_FILE" . \
          -x "*.git*" \
          -x "*.md" \
          -x "*.log" \
          -x "buildspec.yml" \
          -x ".github/*" \
          -x "DEPLOYMENT_NOTES.md" \
          -x "README.md" || { echo "ERROR: Failed to create zip"; exit 1; }
        
        echo "Zip created. Verifying..."
        cd "$ARTIFACT_DIR"
        echo "Artifact directory: $(pwd)"
        ls -lah app.zip || { echo "ERROR: app.zip not found in artifact dir!"; exit 1; }
        
        echo "=== VERIFYING ZIP STRUCTURE ==="
        echo "Zip file location: $(pwd)/app.zip"
        echo "Zip file size: $(du -h app.zip)"
        echo ""
        echo "Full zip contents:"
        unzip -l app.zip | head -30
        echo "..."
        unzip -l app.zip | tail -10
        echo ""
        echo "=== CHECKING FOR appspec.yml ==="
        
        # List all files in zip and check for appspec.yml at root
        ZIP_FILES=$(unzip -l app.zip 2>/dev/null | awk 'NR>3 && NF>=4 {print $4}')
        echo "Total files in zip: $(echo "$ZIP_FILES" | wc -l)"
        
        # Check if appspec.yml exists at root (exact match)
        if echo "$ZIP_FILES" | grep -xE "^appspec\.yml$" > /dev/null; then
          echo "✅ appspec.yml found at ROOT level of zip"
        else
          echo "❌ ERROR: appspec.yml NOT found at root level!"
          echo "Looking for appspec.yml in zip..."
          echo "$ZIP_FILES" | grep -i appspec || echo "❌ No appspec.yml found anywhere!"
          echo ""
          echo "First 30 files in zip:"
          echo "$ZIP_FILES" | head -30
          exit 1
        fi
        
        # Test extraction to verify CodeDeploy will be able to extract it
        echo "Testing extraction of appspec.yml..."
        mkdir -p /tmp/zip-test
        cd /tmp/zip-test
        rm -f appspec.yml
        unzip -j "$ZIP_FILE" appspec.yml 2>&1 || {
          echo "❌ ERROR: Could not extract appspec.yml from zip!"
          echo "Attempting to see what's in zip..."
          unzip -l "$ZIP_FILE" | head -20
          rm -rf /tmp/zip-test
          exit 1
        }
        if [ -f appspec.yml ]; then
          echo "✅ Successfully extracted appspec.yml"
          echo "File size: $(du -h appspec.yml)"
          echo "First 10 lines of appspec.yml:"
          head -10 appspec.yml
          rm -rf /tmp/zip-test
        else
          echo "❌ ERROR: appspec.yml file not found after extraction!"
          rm -rf /tmp/zip-test
          exit 1
        fi
        
        echo "✅ ZIP VERIFICATION COMPLETE - appspec.yml is at root and extractable"
      - 'echo "Package created: app.zip"'
      - echo "Skipping manual CodeDeploy trigger; CodePipeline Deploy stage will handle deployment."

artifacts:
  files:
    - app.zip
  name: app.zip

cache:
  paths:
    - logic-legends-app/node_modules/**/*